import logging
import aiogram
import psycopg2
import asyncio
print('–ø—Ä–∏–≤–µ—Ç')
from docxtpl import DocxTemplate
import os

from aiogram import Bot, Dispatcher, types,Router,F 
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup
from dotenv import load_dotenv
load_dotenv()


import requests
from typing import List, Tuple
from datetime import datetime

ACCESS_TOKEN = os.getenv("VK_API_TOKEN")
API_VERSION = "5.131"
API_TOKEN = os.getenv("TELEGRAM_BOT_API_KEY")




logging.basicConfig(level=logging.INFO,format="%(filename)s:%(lineno)d #%(levelname)-8s " "[%(asctime)s] - %(name)s - %(message)s")

bot = Bot(token=API_TOKEN)
async def main():
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

router: Router=Router()
params = {
        'host': 'localhost',
        'port': 5432,
        'database': 'botCyberSup',
        'user': 'postgres',
        'password': 'parol'
     }
conn = psycopg2.connect(**params)

class Dialog(StatesGroup):
    addProjectId = State()    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID –ø—Ä–æ–µ–∫—Ç–∞
    addProjectName = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    deleteProject = State()
    deleteUser = State()
    selectCustomer = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
    assignProjects = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    selectProject = State()
    startDate = State()
    endDate = State()

# –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message: Message):
    cur = conn.cursor()
    cur.execute("SELECT role, chapter FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    
    role, chapter = user
    keyboard = ReplyKeyboardBuilder()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—á–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if chapter == "–ó–∞–∫–∞–∑—á–∏–∫":
        keyboard.add(types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        keyboard.add(types.KeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏'))
        keyboard.add(types.KeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
        keyboard.add(types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    
    keyboard.adjust(2)
    await message.answer("üè† –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def start(message: Message):
    cur = conn.cursor()
    cur.execute("SELECT role, chapter FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    
    role, chapter = user
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ VK!", 
        reply_markup=main_keyboard(chapter)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_keyboard(user_chapter: str = None) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = ReplyKeyboardBuilder()
    
    if user_chapter == "–ó–∞–∫–∞–∑—á–∏–∫":
        keyboard.add(types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    else:
        keyboard.add(types.KeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏'))
        keyboard.add(types.KeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
        keyboard.add(types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    cur = conn.cursor()
    cur.execute("SELECT role, chapter FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    
    role, chapter = user
    await message.answer(
        "üè† –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", 
        reply_markup=main_keyboard(chapter)
    )

@router.message(F.text == '–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏')
async def back_to_project_management(message: Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor()
    cur.execute('SELECT id, name FROM projects')
    projects = cur.fetchall()

    if not projects:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=companies_keyboard())
        return

    response_text = "<b>üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n\n"
    for idx, (project_id, project_name) in enumerate(projects, start=1):
        response_text += f"{idx}. üè¢ {project_name}\n"

    await message.answer(response_text.strip(), parse_mode="HTML", reply_markup=companies_keyboard())
    await message.answer('üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=companies_keyboard())


@router.message(F.text == '–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
async def back_to_user_management(message: Message, state: FSMContext):
    await state.clear()
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
    keyboard.add(types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã'))
    keyboard.add(types.KeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)

    cur.execute("SELECT key, name, role, chapter FROM users ORDER BY chapter, role")
    users = cur.fetchall()
    
    if not users:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", 
                           reply_markup=keyboard.as_markup(resize_keyboard=True))
        return

    response = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    response += "üë®‚Äçüíº <b>–°–û–¢–†–£–î–ù–ò–ö–ò:</b>\n"
    
    role_emojis = {
        "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω": "üëë",
        "–õ–µ–æ–Ω–∏–¥–∫–∞": "‚≠êÔ∏è",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "üë§"
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
    for role in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
        staff_in_role = [u for u in users if u[2] == role and u[3] == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]
        if staff_in_role:
            response += f"   {role_emojis[role]} <b>{role}:</b>\n"
            for idx, (_, name, _, _) in enumerate(staff_in_role, 1):
                response += f"      {idx}. {name}\n"
            response += "\n"
    
    # –ó–∞–∫–∞–∑—á–∏–∫–∏
    customers = [u for u in users if u[3] == "–ó–∞–∫–∞–∑—á–∏–∫"]
    if customers:
        response += "ü§ù <b>–ó–ê–ö–ê–ó–ß–ò–ö–ò:</b>\n"
        for idx, (_, name, _, _) in enumerate(customers, 1):
            response += f"   {idx}. {name}\n"

    await message.answer(response.strip(), parse_mode="HTML", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))
    await message.answer('üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))

# ------------------------------------------------------------------------------

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏
def companies_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'))
    keyboard.add(types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

def based_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

def based_keyboard_2():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
def based_keyboard_3():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏"
@router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏')
async def project_management(message: Message):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user or user[0] not in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'))
    keyboard.add(types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    cur.execute('SELECT id, name FROM projects ORDER BY name')
    projects = cur.fetchall()
    
    if not projects:
        await message.answer(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", 
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        return

    response = "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n\n"
    for idx, (project_id, name) in enumerate(projects, 1):
        response += f"{idx}. üè¢ {name} (ID: {project_id})\n"

    await message.answer(
        response, 
        parse_mode="HTML", 
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )


# ------------------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê -----------------------------------

def get_ads_accounts():
    url = "https://api.vk.com/method/ads.getAccounts"
    params = {
        "access_token": ACCESS_TOKEN,
        "v": API_VERSION
    }
    
    response = requests.get(url, params=params).json()
    
    if "response" in response:
        return [account["account_id"] for account in response["response"]]
    else:
        print("–û—à–∏–±–∫–∞:", response)
        return []
    

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç')
async def add_project_start(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()

    if not user or user[0] not in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    await state.set_state(Dialog.addProjectId)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", 
        reply_markup=based_keyboard()
    )

@router.message(Dialog.addProjectId)
async def add_project_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", 
                           reply_markup=based_keyboard())
        return

    project_id = int(message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑–µ
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM projects WHERE id = %s", (str(project_id),))
    (count,) = cur.fetchone()

    if count > 0:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Å ID {project_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", 
                           reply_markup=based_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö VK
    ads_accounts = get_ads_accounts()
    if project_id not in ads_accounts:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–π ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ VK.", 
                           reply_markup=based_keyboard())
        return

    await state.update_data(project_id=project_id)
    await state.set_state(Dialog.addProjectName)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=based_keyboard_3())

@router.message(Dialog.addProjectName)
async def add_project_name(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(Dialog.addProjectId)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", 
                           reply_markup=based_keyboard())
        return

    project_name = message.text.strip()
    if not project_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", 
                           reply_markup=based_keyboard_3())
        return

    state_data = await state.get_data()
    project_id = state_data['project_id']

    cur = conn.cursor()
    cur.execute("INSERT INTO projects (id, name) VALUES (%s, %s)", 
                (str(project_id), project_name))
    conn.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç <b>{project_name}</b> (ID: {project_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
        parse_mode="HTML", 
        reply_markup=based_keyboard()
    )


# ------------------------------ –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê -----------------------------------

@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç')
async def delete_project_start(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()

    if not user or user[0] not in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    cur.execute('SELECT id, name FROM projects ORDER BY name')
    projects = cur.fetchall()
    
    if not projects:
        await message.answer(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", 
            reply_markup=based_keyboard()
        )
        return

    response = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    projects_dict = {}
    for idx, (project_id, name) in enumerate(projects, 1):
        response += f"{idx}. üè¢ {name} (ID: {project_id})\n"
        projects_dict[idx] = project_id

    await state.update_data(projects_dict=projects_dict)
    await state.set_state(Dialog.deleteProject)
    await message.answer(
        response, 
        parse_mode="HTML", 
        reply_markup=based_keyboard()
    )
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@router.message(Dialog.deleteProject)
async def confirm_project_deletion(message: Message, state: FSMContext):
    user_input = message.text.strip()
    
    if not user_input.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–æ–µ–∫—Ç—É.", reply_markup=based_keyboard())
        return
    
    project_number = int(user_input)
    state_data = await state.get_data()
    projects_dict = state_data.get("projects_dict", {})
    
    if project_number not in projects_dict:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=based_keyboard())
        return
    
    project_id = projects_dict[project_number]
    
    confirm_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{project_id}")
    ], [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    ]])
    
    await state.update_data(project_id=project_id)
    await message.answer(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?", parse_mode="HTML", reply_markup=confirm_markup)

@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_project_callback(callback: CallbackQuery, state: FSMContext):
    project_id = callback.data.split(":")[1]
    
    cur = conn.cursor()
    cur.execute("DELETE FROM projects WHERE id = %s", (project_id,))
    conn.commit()
    
    await state.clear()
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_project_deletion(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await state.clear()
    
    cur = conn.cursor()
    cur.execute('SELECT id, name FROM projects')
    projects = cur.fetchall()

    if not projects:
        await callback.message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=based_keyboard())
        return

    response_text = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    projects_dict = {}
    for idx, (project_id, project_name) in enumerate(projects, start=1):
        response_text += f"{idx}. üè¢ <b>{project_name}</b> (ID: {project_id})\n"
        projects_dict[idx] = project_id

    await state.update_data(projects_dict=projects_dict)
    await state.set_state(Dialog.deleteProject)

    await callback.message.answer(response_text.strip(), parse_mode="HTML", reply_markup=based_keyboard())
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


#---------------------------------------------------------------------------------------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
async def user_management(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
    keyboard.add(types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã'))
    keyboard.add(types.KeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)

    cur.execute("SELECT key, name, role, chapter FROM users ORDER BY chapter, role")
    users = cur.fetchall()
    
    if not users:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", 
                           reply_markup=keyboard.as_markup(resize_keyboard=True))
        return

    response = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    response += "üë®‚Äçüíº <b>–°–û–¢–†–£–î–ù–ò–ö–ò:</b>\n"
    
    role_emojis = {
        "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω": "üëë",
        "–õ–µ–æ–Ω–∏–¥–∫–∞": "‚≠êÔ∏è",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "üë§"
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
    for role in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
        staff_in_role = [u for u in users if u[2] == role and u[3] == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]
        if staff_in_role:
            response += f"   {role_emojis[role]} <b>{role}:</b>\n"
            for idx, (_, name, _, _) in enumerate(staff_in_role, 1):
                response += f"      {idx}. {name}\n"
            response += "\n"
    
    # –ó–∞–∫–∞–∑—á–∏–∫–∏
    customers = [u for u in users if u[3] == "–ó–∞–∫–∞–∑—á–∏–∫"]
    if customers:
        response += "ü§ù <b>–ó–ê–ö–ê–ó–ß–ò–ö–ò:</b>\n\n"
        for idx, (_, name, _, _) in enumerate(customers, 1):
            response += f"   {idx}. {name}\n"

    await message.answer(response.strip(), parse_mode="HTML", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))
    await message.answer('üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))

@router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤')
async def view_assigned_projects(message: Message):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ–µ–∫—Ç—ã
    cur.execute("""
        SELECT u.name, u.project, u.key 
        FROM users u 
        WHERE u.chapter = '–ó–∞–∫–∞–∑—á–∏–∫' 
        ORDER BY u.name
    """)
    customers = cur.fetchall()

    if not customers:
        await message.answer(
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.",
            reply_markup=main_keyboard("–°—É–ø–µ—Ä–∞–¥–º–∏–Ω")
        )
        return

    response = "üìã <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:</b>\n\n"
    
    for customer_name, project_ids, customer_key in customers:
        response += f"üë§ <b>{customer_name}</b>\n"
        
        if not project_ids:
            response += "   ‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
            project_id_list = project_ids.split(',')
            cur.execute(
                "SELECT id, name FROM projects WHERE id = ANY(%s) ORDER BY name",
                (project_id_list,)
            )
            projects = cur.fetchall()
            
            if not projects:
                response += "   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            else:
                for idx, (project_id, project_name) in enumerate(projects, 1):
                    response += f"   {idx}. üè¢ {project_name} (ID: {project_id})\n"
        
        response += "\n"

    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts[:-1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            await message.answer(part, parse_mode="HTML")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            parts[-1], 
            parse_mode="HTML",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
    else:
        await message.answer(
            response, 
            parse_mode="HTML",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AddUser(StatesGroup):
    chapter = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key = State()
    name = State()
    role = State()

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def add_user_start(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()

    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.", reply_markup=based_keyboard_2())
        return

    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ó–∞–∫–∞–∑—á–∏–∫'))
    keyboard.add(types.KeyboardButton(text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫'))
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))

    keyboard.adjust(1)

    await state.set_state(AddUser.chapter)
    await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard.as_markup(resize_keyboard=True))

@router.message(AddUser.chapter)
async def add_user_chapter(message: Message, state: FSMContext):
    if message.text not in ['–ó–∞–∫–∞–∑—á–∏–∫', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫']:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(chapter=message.text)
    await state.set_state(AddUser.key)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (ID) –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=based_keyboard_3())

@router.message(AddUser.key)
async def add_user_key(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(AddUser.chapter)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = ReplyKeyboardBuilder()
        keyboard.add(types.KeyboardButton(text='–ó–∞–∫–∞–∑—á–∏–∫'))
        keyboard.add(types.KeyboardButton(text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫'))
        keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
        keyboard.adjust(1)

        await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard.as_markup(resize_keyboard=True))
        return

    elif not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=based_keyboard_3())
        return
    else:
        await state.update_data(key=int(message.text))
        await state.set_state(AddUser.name)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=based_keyboard_3())

@router.message(AddUser.name)
async def add_user_name(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(AddUser.key)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (ID) –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=based_keyboard_3())
        return

    user_data = await state.get_data()
    await state.update_data(name=message.text.strip())

    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    if user_data.get('chapter') == '–ó–∞–∫–∞–∑—á–∏–∫':
        cur = conn.cursor()
        cur.execute("INSERT INTO users (key, name, role, chapter) VALUES (%s, %s, %s, %s)", 
                    (user_data['key'], message.text.strip(), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ó–∞–∫–∞–∑—á–∏–∫'))
        conn.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ <b>{message.text.strip()}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
            parse_mode="HTML", 
            reply_markup=based_keyboard_2()
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
    await state.set_state(AddUser.role)
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–°—É–ø–µ—Ä–∞–¥–º–∏–Ω'))
    keyboard.add(types.KeyboardButton(text='–õ–µ–æ–Ω–∏–¥–∫–∞'))
    keyboard.add(types.KeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard.as_markup(resize_keyboard=True))

@router.message(AddUser.role)
async def add_user_role(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(AddUser.name)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=based_keyboard_3())
        return

    if message.text not in ['–°—É–ø–µ—Ä–∞–¥–º–∏–Ω', '–õ–µ–æ–Ω–∏–¥–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    user_data = await state.get_data()
    cur = conn.cursor()
    cur.execute("INSERT INTO users (key, name, role, chapter) VALUES (%s, %s, %s, %s)", 
                (user_data['key'], user_data['name'], message.text, user_data['chapter']))
    conn.commit()
    
    await state.clear()
    await message.answer(
        f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{user_data['name']}</b> "
        f"—Å —Ä–æ–ª—å—é <b>{message.text}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
        parse_mode="HTML", 
        reply_markup=based_keyboard_2()
    )

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def delete_user_list(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))

    user = cur.fetchone()

    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    cur.execute("SELECT key, name, role, chapter FROM users ORDER BY chapter, role")
    users = cur.fetchall()
    
    if not users:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", 
                           reply_markup=based_keyboard_2())
        return
    
    response = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    users_dict = {}
    counter = 1

    role_emojis = {
        "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω": "üëë",
        "–õ–µ–æ–Ω–∏–¥–∫–∞": "‚≠êÔ∏è",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "üë§"
    }

    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    response += "üë®‚Äçüíº <b>–°–û–¢–†–£–î–ù–ò–ö–ò:</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
    for role in ["–°—É–ø–µ—Ä–∞–¥–º–∏–Ω", "–õ–µ–æ–Ω–∏–¥–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
        staff_in_role = [u for u in users if u[2] == role and u[3] == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]
        if staff_in_role:
            response += f"   {role_emojis[role]} <b>{role}:</b>\n"
            for user_key, name, _, _ in staff_in_role:
                response += f"      {counter}. {name}\n"
                users_dict[counter] = user_key
                counter += 1
            response += "\n"
    
    # –ó–∞–∫–∞–∑—á–∏–∫–∏
    customers = [u for u in users if u[3] == "–ó–∞–∫–∞–∑—á–∏–∫"]
    if customers:
        response += "ü§ù <b>–ó–ê–ö–ê–ó–ß–ò–ö–ò:</b>\n\n"
        for user_key, name, _, _ in customers:
            response += f"   {counter}. {name}\n"
            users_dict[counter] = user_key
            counter += 1
    
    await state.update_data(users_dict=users_dict)
    await state.set_state(Dialog.deleteUser)
    await message.answer(response.strip(), parse_mode="HTML")
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                        reply_markup=based_keyboard_2())

@router.message(Dialog.deleteUser)
async def delete_user(message: Message, state: FSMContext):
    user_input = message.text.strip()
    if not user_input.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    user_number = int(user_input)
    state_data = await state.get_data()
    users_dict = state_data.get("users_dict", {})
    
    if user_number not in users_dict:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    user_key = users_dict[user_number]
    cur = conn.cursor()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    confirm_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user:{user_key}")
    ], [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_user")
    ]])
    
    cur.execute("SELECT name FROM users WHERE key = %s", (user_key,))
    user_name = cur.fetchone()[0]
    
    await message.answer(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_name}</b>?", parse_mode="HTML", reply_markup=confirm_markup)

@router.callback_query(F.data.startswith("confirm_delete_user:"))
async def confirm_delete_user(callback: CallbackQuery, state: FSMContext):
    user_key = callback.data.split(":")[1]
    
    cur = conn.cursor()
    cur.execute("DELETE FROM users WHERE key = %s", (user_key,))
    conn.commit()
    
    await state.clear()
    await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await callback.answer()

@router.callback_query(F.data == "cancel_delete_user")
async def cancel_delete_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    
    cur = conn.cursor()
    cur.execute("SELECT key, name FROM users")
    users = cur.fetchall()
    
    if not users:
        await callback.message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=companies_keyboard())
        return
    
    response = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    users_dict = {}
    for idx, (user_key, user_name) in enumerate(users, start=1):
        response += f"{idx}. üë§ <b>{user_name}</b> (ID: {user_key})\n"
        users_dict[idx] = user_key
    
    await state.update_data(users_dict=users_dict)
    await state.set_state(Dialog.deleteUser)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback.message.answer(response.strip(), parse_mode="HTML")
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π–Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=based_keyboard_2())

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_statistics_projects(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute('SELECT role, chapter, project FROM users WHERE key = %s', 
                (message.from_user.id,))
    user = cur.fetchone()

    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    role, chapter, user_projects = user

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chapter == "–ó–∞–∫–∞–∑—á–∏–∫":
        if not user_projects:
            await message.answer("‚ùå –ö –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.", 
                               reply_markup=main_keyboard())
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ ID
        project_ids = [pid.strip() for pid in user_projects.split(',')]
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
        cur.execute(
            'SELECT id, name FROM projects WHERE id = ANY(%s) ORDER BY name',
            (project_ids,)
        )
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        cur.execute('SELECT id, name FROM projects ORDER BY name')

    projects = cur.fetchall()

    if not projects:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", 
                           reply_markup=main_keyboard())
        return

    response_text = "<b>üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n"
    projects_dict = {}
    
    for idx, (project_id, project_name) in enumerate(projects, start=1):
        response_text += f"{idx}. üè¢ {project_name} (ID: {project_id})\n"
        projects_dict[idx] = (project_id, project_name)

    await state.update_data(projects_dict=projects_dict)
    await state.set_state(Dialog.selectProject)
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer(response_text, parse_mode="HTML", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞:")

@router.message(Dialog.selectProject)
async def process_project_selection(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    project_number = int(message.text)
    state_data = await state.get_data()
    projects_dict = state_data.get('projects_dict', {})

    if project_number not in projects_dict:
        await message.answer("‚ùå –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    cur = conn.cursor()
    cur.execute('SELECT chapter, project FROM users WHERE key = %s', 
                (message.from_user.id,))
    user = cur.fetchone()
    
    if user[0] == "–ó–∞–∫–∞–∑—á–∏–∫":
        project_id = str(projects_dict[project_number][0])
        user_projects = [pid.strip() for pid in (user[1] or '').split(',')]
        
        if project_id not in user_projects:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
            return

    project_id, project_name = projects_dict[project_number]
    await state.update_data(selected_project_id=project_id, 
                           selected_project_name=project_name)
    await state.set_state(Dialog.startDate)
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2025):",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

@router.message(Dialog.startDate)
async def process_start_date(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞':
        await show_statistics_projects(message, state)
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ YYYY-MM-DD –¥–ª—è API
        start_date = datetime.strptime(message.text, '%d.%m.%Y')
        if start_date > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        api_date = start_date.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç –¥–ª—è API
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2025)")
        return

    await state.update_data(start_date=api_date)
    await state.set_state(Dialog.endDate)
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

@router.message(Dialog.endDate)
async def process_end_date(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ':
        state_data = await state.get_data()
        await state.set_state(Dialog.startDate)
        keyboard = ReplyKeyboardBuilder()
        keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞'))
        keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
        keyboard.adjust(1)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        return

    state_data = await state.get_data()
    try:
        start_date = datetime.strptime(state_data['start_date'], '%Y-%m-%d')
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        end_date = datetime.strptime(message.text, '%d.%m.%Y')
        api_end_date = end_date.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç –¥–ª—è API
        
        if end_date < start_date:
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.")
            return
        if end_date > datetime.now():
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ VK API
    project_id = state_data['selected_project_id']
    project_name = state_data['selected_project_name']
    
    await message.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–π
    campaigns_stats = get_campaigns_stats(
        account_id=project_id,
        start_date=state_data['start_date'],
        end_date=api_end_date
    )
    
    if not campaigns_stats:
        keyboard = ReplyKeyboardBuilder()
        keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ'))
        keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
        keyboard.adjust(1)
        
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    display_start_date = datetime.strptime(state_data['start_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
    display_end_date = end_date.strftime('%d.%m.%Y')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É <b>{project_name}</b>\n"
    response += f"–ó–∞ –ø–µ—Ä–∏–æ–¥: {display_start_date} - {display_end_date}\n\n"
    
    total_spent = 0
    for idx, (name, spent) in enumerate(campaigns_stats, 1):
        response += f"{idx}. {name} - {spent:.2f}‚ÇΩ\n"
        total_spent += spent

    if len(campaigns_stats) > 2:
        response += f"\n–ò—Ç–æ–≥–æ: {total_spent:.2f}‚ÇΩ"

    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)

    await state.clear()
    await message.answer(
        response, 
        parse_mode="HTML", 
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
@router.message(F.text == '–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ')
async def back_to_statistics(message: Message, state: FSMContext):
    await show_statistics_projects(message, state)

def get_campaigns_stats(account_id: int, start_date: str, end_date: str) -> List[Tuple[str, float]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ VK API"""
    url = "https://api.vk.com/method/ads.getStatistics"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
    campaigns_response = requests.get(
        "https://api.vk.com/method/ads.getCampaigns",
        params={
            "account_id": account_id, 
            "access_token": ACCESS_TOKEN, 
            "v": API_VERSION,
            "include_deleted": 0
        }
    ).json()
    
    if "response" not in campaigns_response:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {campaigns_response}")
        return []
    
    campaign_ids = [camp["id"] for camp in campaigns_response["response"]]
    if not campaign_ids:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
        return []
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    params = {
        "account_id": account_id,
        "ids_type": "campaign",
        "period": "day",
        "date_from": start_date,
        "date_to": end_date,
        "access_token": ACCESS_TOKEN,
        "v": API_VERSION,
        "ids": ",".join(map(str, campaign_ids))
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_response = requests.get(url, params=params).json()
    print(f"–û—Ç–≤–µ—Ç API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_response}")
    
    if "response" not in stats_response:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_response}")
        return []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ > 0
    campaigns_with_spent = []
    campaigns_dict = {camp["id"]: camp["name"] for camp in campaigns_response["response"]}
    
    for stat in stats_response["response"]:
        total_spent = 0
        if stat.get("stats"):
            for day in stat["stats"]:
                spent = float(day.get("spent", 0))
                total_spent += spent
        
        if total_spent > 0:
            campaign_name = campaigns_dict.get(stat["id"], f"–ö–∞–º–ø–∞–Ω–∏—è {stat['id']}")
            campaigns_with_spent.append((campaign_name, total_spent))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {len(campaigns_with_spent)}")
    return sorted(campaigns_with_spent, key=lambda x: x[1], reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤

@router.message(F.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã')
async def assign_projects_start(message: Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE key = %s", (message.from_user.id,))
    user = cur.fetchone()
    
    if not user or user[0] != "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    cur.execute("SELECT key, name FROM users WHERE chapter = '–ó–∞–∫–∞–∑—á–∏–∫' ORDER BY name")
    customers = cur.fetchall()
    
    if not customers:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.", 
                           reply_markup=main_keyboard(user[0]))
        return

    response = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n\n"
    customers_dict = {}
    
    for idx, (customer_key, name) in enumerate(customers, 1):
        response += f"{idx}. üë§ {name}\n"
        customers_dict[idx] = (customer_key, name)

    await state.update_data(customers_dict=customers_dict)
    await state.set_state(Dialog.selectCustomer)
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer(response, parse_mode="HTML", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:")

@router.message(Dialog.selectCustomer)
async def process_customer_selection(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏':
        await user_management(message, state)
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    customer_number = int(message.text)
    state_data = await state.get_data()
    customers_dict = state_data.get('customers_dict', {})

    if customer_number not in customers_dict:
        await message.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    customer_key, customer_name = customers_dict[customer_number]
    await state.update_data(selected_customer_key=customer_key, 
                           selected_customer_name=customer_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    cur = conn.cursor()
    cur.execute('SELECT id, name FROM projects ORDER BY name')
    projects = cur.fetchall()
    
    if not projects:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
    cur.execute('SELECT project FROM users WHERE key = %s', (customer_key,))
    current_projects = cur.fetchone()[0]
    current_projects = current_projects.split(',') if current_projects else []
    
    response = f"üè¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ {customer_name}:</b>\n"
    response += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)\n\n"
    
    projects_dict = {}
    for idx, (project_id, name) in enumerate(projects, 1):
        marker = "‚úÖ" if str(project_id) in current_projects else "‚ö™Ô∏è"
        response += f"{idx}. {marker} {name} (ID: {project_id})\n"
        projects_dict[idx] = (project_id, name)

    await state.update_data(projects_dict=projects_dict)
    await state.set_state(Dialog.assignProjects)
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∑–∞–∫–∞–∑—á–∏–∫–∞'))
    keyboard.add(types.KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    keyboard.adjust(1)
    
    await message.answer(response, parse_mode="HTML", 
                        reply_markup=keyboard.as_markup(resize_keyboard=True))

@router.message(Dialog.assignProjects)
async def process_projects_assignment(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∑–∞–∫–∞–∑—á–∏–∫–∞':
        await assign_projects_start(message, state)
        return

    state_data = await state.get_data()
    projects_dict = state_data.get('projects_dict', {})
    customer_key = state_data.get('selected_customer_key')
    customer_name = state_data.get('selected_customer_name')

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        selected_numbers = [int(num.strip()) for num in message.text.split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
        if not all(num in projects_dict for num in selected_numbers):
            await message.answer("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –ø—Ä–æ–µ–∫—Ç–æ–≤
        project_ids = [str(projects_dict[num][0]) for num in selected_numbers]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur = conn.cursor()
        cur.execute(
            "UPDATE users SET project = %s WHERE key = %s",
            (','.join(project_ids), customer_key)
        )
        conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        project_names = [projects_dict[num][1] for num in selected_numbers]
        response = f"‚úÖ –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ <b>{customer_name}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã:\n"
        for idx, name in enumerate(project_names, 1):
            response += f"{idx}. {name}\n"

        await state.clear()
        await message.answer(response, parse_mode="HTML", 
                           reply_markup=main_keyboard("–°—É–ø–µ—Ä–∞–¥–º–∏–Ω"))

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())